Already in scope: edges[N][N], weights[N][N], source int


Let Init(source int) -> (frontier_list int[N][N], num_paths int[N], deps int[N], visited int[N]):
   num_paths[j] = (j == source)
   deps[j] = 0
   visited[j] = (j == source)
   frontier_list[r][j] = (r == 0 && j == source)
End

Let Frontier(frontier_list int[N][N], visited int[N], round int) -> frontier int[N]
    frontier[j] = edges[j][k] * frontier_list[round][k] * (visited[j] == 0) | k:(OR, 0)
End

Let Forward_Step(frontier_list int[N][N], num_paths int[N], visited int[N], round int) -> (forward_frontier_list int[N][N], forward_num_paths int[N], forward_visited int[N], forward_round int)
	frontier = Frontier(frontier_list, visited, round - 1)

	forward_frontier_list[r][j] = frontier[j] * (r == round) + frontier_list[r][j] * (r != round)
	forward_num_paths[j] = edges[j][k] * frontier_list[round - 1][k] * (visited[j] == 0) * num_paths[k] | k:(+, num_paths[j])
	forward_visited[j] = edges[j][k] * frontier_list[round-1][k] * (visited[j] == 0) | k:(OR, visited[j])
	forward_round = round + 1
End

Let Forward(frontier_list int[N][N], num_paths int[N], visited int[N]) -> (new_forward_frontier_list int[N][N], new_forward_num_paths int[N], new_forward_visited int[N], new_forward_round int)
	new_forward_frontier_list, new_forward_num_paths, new_forward_visited, new_forward_round = Forward_Step*(frontier_list, num_paths, visited, 1) | (#1[#4-1] == 0)
End

Let Backwards_Vertex(frontier_list int[N][N], num_paths int[N], deps int[N], visited int[N], round int) -> (backward_deps int[N], backward_visited int[N])
        backward_deps[j] = deps[j] + num_paths[j] * frontier_list[round][j]
		backward_visited[j] = frontier_list[round][j]
End

Let Backwards_Edge(frontier_list int[N][N], num_paths int[N], deps int[N], visited int[N], round int) -> (backward_deps int[N], backward_round int)
	backward_deps[j] = edges[k][j] * frontier_list[round][k] * visited[k] * deps[k] | k:(+, deps[j])
	backward_round = round - 1
End

Let Backward_Step(frontier_list int[N][N], num_paths int[N], deps int[N], visited int[N], round int) -> (final_frontier_list int[N][N], final_num_paths int[N], final_deps int[N], final_visited int[N], final_round int)
	final_frontier_list[r][j] = frontier_list[r][j]
	final_num_paths[j] = num_paths[j]
	backward_deps, final_visited = Backwards_Vertex(frontier_list, num_paths, deps, visited, round)
	final_deps, final_round = Backwards_Edge(frontier_list, num_paths, backward_deps, final_visited, round)
End

###############
Final Result
###############
Let BC() -> final_deps int[N]
	frontier_list, num_paths, deps, visited = Init(source)
	forward_frontier_list, forward_num_paths, _, forward_round = Forward(frontier_list, num_paths, visited)
	new_deps, new_visited = Backwards_Vertex(forward_frontier_list, forward_num_paths, deps, visited, forward_round)
	_, _, final_deps, _, _ = Backward_Step*(forward_frontier_list, forward_num_paths, new_deps, new_visited, forward_round) | (#5 == 0)
End

f => f^n(x) => f (f ( f(...f(x))))
