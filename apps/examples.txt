frontier[j] = edges[j][k] * frontier_list[round][k] * (visited[j] == 0) | k:(OR, 0)
########################################
int frontier[N];
for(int j=0; j < N; j++) {
     frontier[j] = 0;
     for(int k=0; k < N; k++) {
          frontier[j] |= edges[j][k] * frontier_list[round][k] * (visited[j] == 0);
     }
}

A[i][k] = B[i][j][k][l] * C[j] * D[l] | j:(+, 0), l:(+, 0)
#########################################
for(int i=0; i < N; i++) {
  for(int k=0; k < M; k++) {
      init1 = 0;
      for(int j=0; j < P; j++) {
          init2 = 0;
          for(int l=0; l < O; l++) {
              init2 += B[i][j][k][l] * C[j] * D[l]; => init2 = init2 + B[i][j][k][l] * C[j] * D[l];
          }
          init1 += init2;
      }
      A[i][k] = init1;
  }
}

A[i], B[i] = func(1, 2) | 3
############################
{
    auto& out1 = A[1];
    auto& out2 = B[1];

    std::tie(out1, out2) = fib(1, 1);  OR if one element => out = fib(out);

    for (int k=0; k < (3-1); k++) {
        std::tie(out1, out2) = fib(out1, out2);
    }
}

A[i] = (func(B[i][k]) | 3) * C[k]  | k:(+, 0)
#################################
for (int i=0; i < N; i++) {

    init_k = 0;
    for (int k=0; k<M; k++) {
        out = func(B[i][k]);
        for (int p=0; p<2; p++) {
            out = func(out);
        }
        init_k = init_k + out * C[k];
    }
    A[i] = init_k;
}

for (int i=0; i < N; i++) {

    init_k = 0;
    for (int k=0; k<M; k++) {
        init_k = init_k + ([&]{
            auto out = func(B[i][k]);
            for (int p=0; p<2; p++) {
                out = func(out);
            }
            return out;
        }()) * C[k];
    }
    A[i] = init_k;
}

Let BFS_Step(F_in int[N], P_in int[N]) -> (F_out int[N], P_out int[N])
    V[j] = P_in[j] == -1
    F_out[j] = G[j][k] * F_in[k] * !V[j] | k: (OR, 0)
    P_out[j] = G[j][k] * F[k] * 1v[j] * k | k:(CHOOSE, P_in[j])
End

Let Init() -> (F int[N], P int[N])
    F[j] = (j == source)
    P[j] = -1
End

F_in, P_in = Init()
_, P_out = BFS_Step*(F_in, P_in) | (#1 == 0)