frontier[j] = edges[j][k] * frontier_list[round][k] * (visited[j] == 0) | k:(OR, 0)
########################################
int frontier[N];
for(int j=0; j < N; j++) {
     frontier[j] = 0;
     for(int k=0; k < N; k++) {
          frontier[j] |= edges[j][k] * frontier_list[round][k] * (visited[j] == 0);
     }
}

A[i][k] = B[i][j][k][l] * C[j] * D[l] | j:(+, 0), l:(+, 0)
#########################################
for(int i=0; i < N; i++) {
  for(int k=0; k < M; k++) {
      init1 = 0;
      for(int j=0; j < P; j++) {
          init2 = 0;
          for(int l=0; l < O; l++) {
              init2 += B[i][j][k][l] * C[j] * D[l]; => init2 = init2 + B[i][j][k][l] * C[j] * D[l];
          }
          init1 += init2;
      }
      A[i][k] = init1;
  }
}

A[i], B[i] = func(1, 2) | 3
----------------------------
a, b = func(1,2) | 3
A[i] = a
B[i] = b;
############################

for (int i=0; i < N; i++) {

}